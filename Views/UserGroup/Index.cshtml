@model dotnet_facebook.Models.DatabaseObjects.Groups.Group

@{
    ViewData["Title"] = "Profile Card";
    Layout = "_LayoutRegular";
}

@section Styles
{
    <link rel="stylesheet" href="~/css/profilestyles.css" />
}

<div class="card">
    <div class="container">
        <div class="row p-0">
            <div class="col p-0">
                @if (string.IsNullOrEmpty(Model.GroupPictureFileName))
                {
                    <img class="profile-img rounded-4" src="~/defaultUser.jpg" alt="Jan Kowalski">
                }
                else
                {
                    <img class="profile-img rounded-4 bg-secondary" src="~/uploadedFiles/@Model.GroupPictureFileName" alt="Jan Kowalski">
                }
            </div>
            <div class="col container p-0">
                <div class="row h-25 bg-secondary mx-3 mb-3 rounded-4 justify-content-center align-items-center">
                    <p class="m-0 text-center">@Model.GroupName</p>
                </div>
                <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                    <p class="m-0 text-center">Created: @Model.GroupCreationDate.ToShortDateString()</p>
                </div>
                @if ((bool)ViewBag.IsAdmin)
                {
                    <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                        <p class="m-0 text-center">Welcome, Admin </p>
                        
                    </div>
                    

                }
                else if ((bool)ViewBag.IsModerator)
                {
                    <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                        <p class="m-0 text-center">Welcome, Mod</p>
                    </div>
                }
                else if ((bool)ViewBag.IsMember)
                {
                    <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                        <p class="m-0 text-center">Welcome, Member</p>
                    </div>
                }
                @*
                <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                <p class="m-0 text-center">Join</p>
                </div>
                *@
            </div>
        </div>
    </div>
    <div class="buttons my-2">
        <button class="btn btn-secondary rounded-4" data-bs-toggle="modal" data-bs-target="#membersModal">
            <p class="m-0 text-center text-black">Show members</p>
        </button>
        @if((bool)ViewBag.IsMember || (bool)ViewBag.IsModerator)
        {
            <form asp-action="RemoveUser" method="post" id=" leave-group-form" class="row h-25 bg-secondary mx-3 rounded-4 justify-content-center align-items-center">
                <button type="submit" class="btn btn-secondary rounded-4">
                    <p class="m-0 text-center text-black">Leave Group</p>
                </button>
                <input type="hidden" name="GroupId" value="@Model.GroupId" />
            </form>
        }
        else
        {
            <form asp-action="AddUser" method="post" id=" join-group-form" class="row h-25 bg-secondary mx-3 rounded-4 justify-content-center align-items-center">
                <button type="submit" class="btn btn-secondary rounded-4">
                    <p class="m-0 text-center text-black">Join Group</p>
                </button>
                <input type="hidden" name="GroupId" value="@Model.GroupId" />
            </form>

        }

    </div>
    <!-- Tags section -->
    <p class="w-auto h-auto mt-2">
        <i>
            @foreach (var tag in ViewBag.GroupTags)
            {
                <span class="badge bg-primary opacity-50 rounded-4">@tag.TagName</span>
            }
        </i>
    </p>

    <div class="buttons my-2">
        </button>
        @if ((bool)ViewBag.IsAdmin){
            <button class="btn btn-secondary rounded-4 text-black" id="delete-btn" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete Group</button>
        }
        @if ((bool)ViewBag.IsModerator)
        {
            <button class="btn btn-secondary rounded-4 text-black" data-bs-toggle="modal" data-bs-target="#changePfp">Change Picture</button>
            <button class="btn btn-secondary rounded-4 text-black" id="edit-btn" onclick="showEditForm()">Edit bio</button>
            <button class="btn btn-secondary rounded-4 text-black" id="save-btn" style="display:none;" onclick="submitForm()">Save</button>
            <button class="btn btn-secondary rounded-4 text-black" id="cancel-btn" style="display:none;" onclick="hideEditForm()">Cancel</button>
            
        }
        else if ((bool)ViewBag.IsMember)
        {
            
        }


    </div>

    <div class="bio rounded-4" id="bio-text">@Model.GroupDescription</div>

    <div class="edit-bio-form" id="edit-bio-form" style="display: none;">
        <form asp-action="UpdateBio" method="post" id="bio-form">
            @Html.AntiForgeryToken()
            <textarea style="min-height: 85px; margin-bottom: 15px;" name="GroupDescription" class="form-control rounded-4" oninput="validateBioLength()">@Model.GroupDescription</textarea>
            <input type="hidden" name="GroupId" value="@Model.GroupId" />
            <div id="bio-error" style="color: red; display: none;">Bio needs to be less than 200 characters long.</div>
        </form>
    </div>

    <hr class="my-5 mx-5" />

    <form asp-action="NewPost">
        <input type="hidden" value="@Model.GroupId" name="GroupId"/>
        <div class="row p-0 m-0">
            <div class="col p-0 m-0">
                <div class="d-inline-block">
                    @if (string.IsNullOrEmpty(ViewBag.LocalUser.UserProfile.ProfilePictureFileName))
                    {
                        <img class="rounded-4 d-inline-block mx-2" style="height:48px; width:48px" src="~/defaultUser.jpg" alt="pfp">
                    }
                    else
                    {
                        <img class="rounded-4 d-inline-block mx-2" style="height:48px; width:48px" src="~/uploadedFiles/@ViewBag.LocalUser.UserProfile.ProfilePictureFileName" alt="pfp">
                    }
                    <span>@ViewBag.LocalUser.Nickname</span>
                </div>
                <div class="form-floating multi-select w-50 float-end me-2 rounded-top-4">
                    <select class="form-select" name="selectedTagIds" multiple>
                        @foreach (var tag in ViewBag.Tags)
                        {
                            <option value="@tag.Value">@tag.Text</option>
                        }
                    </select>
                    <label>Select Tags</label>
                </div>
                <div class="form-floating form-floating-outlined-primary w-100 p-2 m-0 d-flex rounded-4">
                    <textarea maxlength="200" type="text" class="form-control overflow-visible" name="Content" id="post-outline" autocomplete="off" style="resize:none; height:150px"></textarea>
                    <label for="post-outline">New Post</label>
                </div>
                <span class="text-danger">@Html.ValidationMessage("Content")</span>
                <button type="submit" value="NewPost" class="btn btn-outline-primary p-2 my-2 w-100 rounded-4">
                    Post!
                    <span class="ripple-surface"></span>
                </button>

            </div>
        </div>
    </form>

    <hr class="my-5 mx-5" />

    @foreach (var post in ViewBag.GroupPosts)
    {
        <div class="bg-secondary w-100 h-auto rounded-4 container my-3">
            <div class="row h-100">
                <div class="col p-2">
                    <a asp-action="Index" asp-controller="UserProfile" asp-route-id="@post.OwnerUser.UserId">
                        @if (string.IsNullOrEmpty(post.OwnerUser.UserProfile.ProfilePictureFileName))
                        {
                            <img class="rounded-4 m-2 d-inline-block" style="height:76px; width:76px" src="~/defaultUser.jpg" alt="Profile Picture">
                        }
                        else
                        {
                            <img class="rounded-4 m-2 d-inline-block" style="height:76px; width:76px" src="~/uploadedFiles/@post.OwnerUser.UserProfile.ProfilePictureFileName" alt="Profile Picture">
                        }

                        <span class="bg-white rounded-4 m-2 d-inline-block w-auto px-3 text-center">
                            @post.OwnerUser.Nickname
                        </span>
                    </a>
                </div>
                <div class="col-9 p-2 m-2">
                    <p class="w-auto text-black-50" style="height:5%">
                        <i>
                            @post.PostDate.ToString("dd/MM/yyyy HH:mm")
                        </i>
                    </p>
                    <div class="bg-white w-auto h-auto rounded-4 container py-2" style="height:70%">
                        <p>
                            @post.Content
                        </p>
                    </div>
                    @if (post.Tags != null && post.Tags.Count > 0)
                    {
                        <p class="w-auto h-auto mt-2">
                            <i>
                                @foreach (var tag in post.Tags)
                                {
                                    <span class="badge bg-primary opacity-50 rounded-4">@tag.TagName</span>
                                }
                            </i>
                        </p>
                    }
                    <div class="container" style="height:20%">
                        <div class="row h-100">
                            <div class="col p-0">
                                <button class="h-auto w-auto btn btn-primary my-2 rounded-4" id="likeButton" onclick="likePost(@post.PostId)">Like</button>
                                <span class="d-inline-block my-2 py-0 h-auto w-auto btn btn-primary disabled rounded-4" id="likeCount-@post.PostId">@post.Likes!.Count</span>
                            </div>
                            <div class="col p-0">
                                <a asp-action="ViewPost" asp-route-id="@post.PostId" asp-controller="UserHome" class="h-auto w-auto btn btn-primary my-2 rounded-4">Reply</a>
                            </div>
                            <div class="col-6 p-0">
                                @if (post.PostLocation != null)
                                {
                                    <span class="h-auto w-auto btn disabled btn-primary my-2 float-end opacity-100 rounded-4">
                                        <i>@post.PostLocation</i>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="membersModal" tabindex="-1" aria-labelledby="membersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="membersModalLabel">Group Members</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nickname</th>
                            <th>Role</th>
                             @if ((bool)ViewBag.IsAdmin)
                            {
                                <th>Change Role</th>
                                <th>Remove</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => user.User.Nickname)</td>
                                <td>@Html.DisplayFor(modelItem => user.GroupRole)</td>
                                @if ((bool)ViewBag.IsAdmin)
                                {
                                    <td>
                                        <form asp-action="Manage" method="post" class="form-group form-inline role-change-form">
                                            <input type="hidden" asp-for="GroupId" value="@Model.GroupId" />
                                            <select name="selectedUserRole" class="form-control-inline" onchange="updateUserRole(this, @user.User.UserId)">
                                                <option value="">Change role</option>
                                                @foreach (var role in ViewBag.Roles)
                                                {
                                                    <option value="@role.Value">@role.Text</option>
                                                }
                                            </select>
                                        </form>
                                    </td>
                                    <td>
                                    <form asp-action="RemoveUser" method="post" id="delete-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="groupId" value="@Model.GroupId" />
                                        <input type="hidden" name="userId" value="@user.User.UserId"/>
                                        <button type="submit" class="btn btn-danger">Remove</button>
                                    </form>

                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="changePfp" tabindex="-1" aria-labelledby="centeredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="centeredModalLabel">Change Profile Picture</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div id="drop_zone" class="bg-primary rounded-4 p-2 py-4" ondrop="dropHandler(event);" ondragover="dragOverHandler(event);" ondragleave="dragEndHandler(event)">
                    <p class="text-white text-center my-auto" id="dragText">Drag a (.png, .jpg) file <i>here</i>. (max 5MB)</p>
                </div>
                <p id="pfp-error" class="text-center" style="color: red; display: none;"></p>
                <input type="hidden" id="groupId" value="@Model.GroupId" />

            </div>

            <div class="modal-footer">
                <button type="button" class="btn" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this group?</p>
            </div>
            <div class="modal-footer">
                <form asp-action="Delete" method="post" id="delete-form">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="GroupId" value="@Model.GroupId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script>
        function showEditForm() {
            document.getElementById('bio-text').style.display = 'none';
            document.getElementById('edit-bio-form').style.display = 'block';
            document.getElementById('edit-btn').style.display = 'none';
            document.getElementById('save-btn').style.display = 'inline-block';
            document.getElementById('cancel-btn').style.display = 'inline-block';
            document.getElementById('btn-cont').style.display = 'inline-block';
        }

        function hideEditForm() {
            document.getElementById('bio-text').style.display = 'block';
            document.getElementById('edit-bio-form').style.display = 'none';
            document.getElementById('edit-btn').style.display = 'inline-block';
            document.getElementById('save-btn').style.display = 'none';
            document.getElementById('cancel-btn').style.display = 'none';
            document.getElementById('btn-cont').style.display = 'none';
        }

        function validateBioLength() {
            var bioTextarea = document.querySelector('textarea[name="GroupDescription"]');
            var submitButton = document.getElementById('save-btn');
            var bioLength = bioTextarea.value.length;

            if (bioLength > 200) {
                submitButton.disabled = true;
                document.getElementById('bio-error').style.display = 'block';
            } else {
                submitButton.disabled = false;
                document.getElementById('bio-error').style.display = 'none';
            }
        }

        function submitForm() {
            document.getElementById('bio-form').submit();
        }

        document.addEventListener('DOMContentLoaded', function () {
            var bioTextarea = document.querySelector('textarea[name="GroupDescription"]');
            bioTextarea.addEventListener('input', validateBioLength);
        });

        function dropHandler(ev) {
            console.log("File dropped");

            // change the dragText
            document.getElementById('dragText').innerHTML = "Drag a file <i>here</i>.";

            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            var file = null;

            if (ev.dataTransfer.items) {
                // Use DataTransferItemList interface to access the file(s)
                for (let i = 0; i < ev.dataTransfer.items.length; i++) {
                    const item = ev.dataTransfer.items[i];
                    // If dropped item is a file, process it
                    if (item.kind === "file") {
                        file = item.getAsFile();
                        break; // Only accept a single file
                    }
                }
            } else {
                // Use DataTransfer interface to access the file(s)
                if (ev.dataTransfer.files.length > 0) {
                    file = ev.dataTransfer.files[0];
                }
            }

            console.log(`… file[0].name = ${file.name}`);

            if (file) {
                const allowedExtensions = ['jpg', 'jpeg', 'png'];
                const maxSize = 5 * 1024 * 1024; // 5MB

                const fileExtension = file.name.split('.').pop().toLowerCase();
                if (!allowedExtensions.includes(fileExtension)) {
                    document.getElementById('pfp-error').innerHTML = "Only .jpg, .jpeg and .png files are allowed!";
                    document.getElementById('pfp-error').style.display = 'block';
                    return;
                }

                if (file.size > maxSize) {
                    document.getElementById('pfp-error').innerHTML = "File is too big! (max 5MB)";
                    document.getElementById('pfp-error').style.display = 'block';
                    return;
                }

                document.getElementById('pfp-error').style.display = 'none';

                // Create a FormData object and append the file
                const formData = new FormData();
                formData.append('file', file);

                // Get the groupId and append it to FormData
                const groupId = document.getElementById('groupId').value;
                formData.append('GroupId', groupId);

                // Create an XMLHttpRequest
                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/UserGroup/UpdateGroupPicture', true);

                // Set up a handler for when the request finishes
                xhr.onload = function () {
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            console.log('File uploaded successfully.');
                            // Refresh the page (clear file cache too)
                            window.location.reload(true);
                        } else {
                            console.error('Error:', response.message);
                            document.getElementById('pfp-error').innerHTML = response.message;
                            document.getElementById('pfp-error').style.display = 'block';
                        }
                    } else {
                        console.error('Error uploading file.');
                        document.getElementById('pfp-error').innerHTML = 'Error uploading file.';
                        document.getElementById('pfp-error').style.display = 'block';
                    }
                };

                // Send the form data
                xhr.send(formData);
            }
        }



        function dragOverHandler(ev) {
            console.log("File(s) in drop zone");

            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            // change the dragText
            document.getElementById('dragText').innerHTML = "<b>Dropping file!</b>";
        }

        function dragEndHandler(ev) {
            console.log("File(s) left the drop zone");

            // change the dragText
            document.getElementById('dragText').innerHTML = "Drag a file <i>here</i>.";
        }
        function updateUserRole(select, userId) {
            var form = select.closest('form'); // Get the closest form element
            var formData = new FormData(form); // Create a FormData object from the form
            formData.append('UserId', userId); // Append the user ID to the form data

            // Perform an AJAX request
            var xhr = new XMLHttpRequest();
            xhr.open('POST', form.action, true); // Use the form's action attribute as the endpoint
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Optional: For distinguishing AJAX requests

            xhr.onload = function () {
                if (xhr.status === 200) {
                    console.log('Role updated successfully.');

                    // refresh site
                    window.location.reload(true);
                } else {
                    console.error('Error updating role:', xhr.responseText);
                }
            };

            xhr.send(formData); // Send the form data via AJAX
        }

        // Add an event listener to prevent the form's default submit action
        document.querySelectorAll('.role-change-form').forEach(function (form) {
            form.addEventListener('submit', function (event) {
                event.preventDefault(); // Prevent the default form submission
            });

            getLocation();
        });

        function likePost(postId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("LikePost", "UserHome")',
                data: { postId: postId },
                success: function (data) {
                    // get like count span
                    var likeCountSpan = document.getElementById('likeCount-' + postId);
                    if (data.alreadyLiked) {
                        // decrement like by 1
                        likeCountSpan.innerHTML = parseInt(likeCountSpan.innerHTML) - 1;
                    }
                    else {
                        // increment like by 1
                        likeCountSpan.innerHTML = parseInt(likeCountSpan.innerHTML) + 1;
                    }
                },
                error: function (xhr, status, error) {

                }
            });
        }

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(sendPosition, showError);
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function sendPosition(position) {
            var lat = position.coords.latitude;
            var lon = position.coords.longitude;

            console.log("Latitude: " + lat + ", Longitude: " + lon);  // Debugging log

            // Send the location data to the server using AJAX
            fetch('/Home/SaveLocation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Latitude: lat, Longitude: lon })
            }).then(response => {
                if (response.ok) {
                    console.log('Location saved successfully.');
                } else {
                    console.error('Error saving location.');
                }
            });
        }

        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    alert("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    alert("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    alert("An unknown error occurred.");
                    break;
            }
        }
    </script>
}