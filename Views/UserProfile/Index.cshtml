@using dotnet_facebook.Models.DatabaseObjects.Users
@model dotnet_facebook.Models.DatabaseObjects.Users.User

@{
    ViewData["Title"] = "Profile Card";
    Layout = "_LayoutRegular";
}

@section Styles
{
    <link rel="stylesheet" href="~/css/profilestyles.css" />
}

<div class="card">
    <div class="container">
        <div class="row p-0">
            <div class="col p-0">
                @if (string.IsNullOrEmpty(Model.UserProfile.ProfilePictureFileName))
                {
                    <img class="profile-img rounded-4" src="~/defaultUser.jpg" alt="Jan Kowalski">
                }
                else
                {
                    <img class="profile-img rounded-4 bg-secondary" src="~/uploadedFiles/@Model.UserProfile.ProfilePictureFileName" alt="Jan Kowalski">
                }
            </div>
            <div class="col container p-0">
                <div class="row h-25 bg-secondary mx-3 mb-3 rounded-4 justify-content-center align-items-center">
                    <p class="m-0 text-center">@Model.Nickname</p>
                </div>
                <div class="row h-25 bg-secondary mx-3 my-3 rounded-4 justify-content-center align-items-center">
                    <p class="m-0 text-center">Joined: @Model.AccountCreationDate.ToShortDateString()</p>
                </div>
            </div>
        </div>
    </div>

    <div class="buttons my-2">
        @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Nickname)
        {
            <button class="btn rounded-4" data-bs-toggle="modal" data-bs-target="#changePfp">Change Profile Picture</button>
        }
        else
        {
            @if (ViewBag.LocalUser != null && ((List<Friendship>)ViewBag.Friends).Any(f => f.User1Id == Model.UserId || f.User2Id == Model.UserId))
			{
                <p class="text-center my-auto opacity-50 bg-secondary rounded-4 p-2">You are friends since @(((List<Friendship>)ViewBag.Friends).FirstOrDefault(f => f.User1Id == Model.UserId || f.User2Id == Model.UserId)!.FriendshipDate.ToShortDateString())</p>
                <a asp-action="RemoveFriend" asp-route-id="@Model.UserId" class="btn rounded-4 px-3">Remove Friend</a>
                <a asp-action="Messages" asp-controller="Messages" asp-route-id="@Model.UserId" class="btn rounded-4 px-3">Message</a>
            }
            else
            {
                <a asp-action="AddFriend" asp-route-id="@Model.UserId" class="btn rounded-4 px-3">Add as Friend</a>
            }
        }

        @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Nickname)
        {
            <button class="btn rounded-4" id="edit-btn" onclick="showEditForm()">Edit bio</button>
            <div id="btn-cont" style="display: none;">
            <button class="btn rounded-4" id="save-btn" style="display:none;" onclick="submitForm()">Save</button>
            <button class="btn rounded-4" id="cancel-btn" style="display:none;" onclick="hideEditForm()">Cancel</button>
            </div>
        }
        @* else 
        {
            <button class="btn rounded-4">Napisz</button>
        }
        // później dodać żeby sprawdzało czy jest w znajomych i wtedy wyświetlić *@
    </div>
    <div class="bio rounded-4" id="bio-text">@Model.UserProfile.UserBio</div>

    <div class="edit-bio-form" id="edit-bio-form" style="display: none;">
        <form asp-action="UpdateBio" method="post" id="bio-form">
            @Html.AntiForgeryToken()
            <textarea style="min-height: 85px; margin-bottom: 15px;" name="UserBio" class="form-control rounded-4" oninput="validateBioLength()">@Model.UserProfile.UserBio</textarea>
            <input type="hidden" name="UserId" value="@Model.UserId" />
            <div id="bio-error" style="color: red; display: none;">Bio needs to be less than 200 characters long.</div>
        </form>
    </div>

    <div class="common-friends">
@* @foreach (var friend in Model.Friendships)
        {
            <div class="friend">
                <img src="avatar.jpg" alt="@friend.User1.UserId" class="friend-avatar">
                <div class="friend-name">@friend.User1.Nickname</div>
            </div>
        } *@
    </div>
</div>

<div class="modal fade" id="changePfp" tabindex="-1" aria-labelledby="centeredModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="centeredModalLabel">Change Profile Picture</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div id="drop_zone" class="bg-primary rounded-4 p-2 py-4" ondrop="dropHandler(event);" ondragover="dragOverHandler(event);" ondragleave="dragEndHandler(event)">
                    <p class="text-white text-center my-auto" id="dragText">Drag a (.png, .jpg) file <i>here</i>. (max 5MB)</p>
                </div>
                <p id="pfp-error" class="text-center" style="color: red; display: none;"></p>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        function showEditForm() {
            document.getElementById('bio-text').style.display = 'none';
            document.getElementById('edit-bio-form').style.display = 'block';
            document.getElementById('edit-btn').style.display = 'none';
            document.getElementById('save-btn').style.display = 'inline-block';
            document.getElementById('cancel-btn').style.display = 'inline-block';
            document.getElementById('btn-cont').style.display = 'inline-block';
        }

        function hideEditForm() {
            document.getElementById('bio-text').style.display = 'block';
            document.getElementById('edit-bio-form').style.display = 'none';
            document.getElementById('edit-btn').style.display = 'inline-block';
            document.getElementById('save-btn').style.display = 'none';
            document.getElementById('cancel-btn').style.display = 'none';
            document.getElementById('btn-cont').style.display = 'none';
        }

        function validateBioLength() {
            var bioTextarea = document.querySelector('textarea[name="UserBio"]');
            var submitButton = document.getElementById('save-btn');
            var bioLength = bioTextarea.value.length;

            if (bioLength > 200) {
                submitButton.disabled = true;
                document.getElementById('bio-error').style.display = 'block';
            } else {
                submitButton.disabled = false;
                document.getElementById('bio-error').style.display = 'none';
            }
        }

        function submitForm() {
            document.getElementById('bio-form').submit();
        }

        document.addEventListener('DOMContentLoaded', function () {
            var bioTextarea = document.querySelector('textarea[name="UserBio"]');
            bioTextarea.addEventListener('input', validateBioLength);
        });

        function dropHandler(ev) {
            console.log("File dropped");

            // change the dragText
            document.getElementById('dragText').innerHTML = "Drag a file <i>here</i>.";

            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            var file = null;

            if (ev.dataTransfer.items) {
                // Use DataTransferItemList interface to access the file(s)
                for (let i = 0; i < ev.dataTransfer.items.length; i++) {
                    const item = ev.dataTransfer.items[i];
                    // If dropped item is a file, process it
                    if (item.kind === "file") {
                        file = item.getAsFile();
                        break; // Only accept a single file
                    }
                }
            } else {
                // Use DataTransfer interface to access the file(s)
                if (ev.dataTransfer.files.length > 0) {
                    file = ev.dataTransfer.files[0];
                }
            }

            console.log(`… file[0].name = ${file.name}`);

            if (file) {
                const allowedExtensions = ['jpg', 'jpeg', 'png'];
                const maxSize = 5 * 1024 * 1024; // 5MB

				const fileExtension = file.name.split('.').pop().toLowerCase();
				if (!allowedExtensions.includes(fileExtension)) {
					document.getElementById('pfp-error').innerHTML = "Only .jpg, .jpeg and .png files are allowed!";
					document.getElementById('pfp-error').style.display = 'block';
					return;
				}

                if (file.size > maxSize) {
					document.getElementById('pfp-error').innerHTML = "File is too big! (max 5MB)";
					document.getElementById('pfp-error').style.display = 'block';
					return;
				}

				document.getElementById('pfp-error').style.display = 'none';
			}

            // Create a FormData object and append the file
            const formData = new FormData();
            formData.append('file', file);

            // Create an XMLHttpRequest
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/UserProfile/UpdateProfilePicture', true);

            // Set up a handler for when the request finishes
            xhr.onload = function () {
                if (xhr.status === 200) {
                    console.log('File uploaded successfully.');
                    // Refresh the page (clear file cache too)
                    window.location.reload(true)
                } else {
                    console.error('Error uploading file.');
                    // Optionally, handle error here
                }
            };

            // Send the form data
            xhr.send(formData);
        }

        function dragOverHandler(ev) {
            console.log("File(s) in drop zone");

            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            // change the dragText
            document.getElementById('dragText').innerHTML = "<b>Dropping file!</b>";
        }

        function dragEndHandler(ev) {
			console.log("File(s) left the drop zone");

            // change the dragText
            document.getElementById('dragText').innerHTML = "Drag a file <i>here</i>.";
		}
    </script>
}
